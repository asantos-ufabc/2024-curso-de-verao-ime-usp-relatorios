{
  "hash": "11116bf33beb903fce0ae83ce52698c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Relatórios reprodutíveis com R\"\nsubtitle: 'Curso de Verão IME-USP 2022' \nauthor: \"Ministrante: Beatriz Milz\"\nformat: \n  revealjs:\n    width: 1600\n    height: 900  \n    toc: false\n    toc_float: true\n    toc-depth: 2\n    toc-location: body\n    toc-title: \"Conteúdos\"\n    logo: \"https://www.ime.usp.br/verao/assets/images/logo_verao.png\" \n    footer: \"Slides por [Beatriz Milz](https://beamilz.com) (@BeaMilz), feito com  [Quarto](https://quarto.org/docs/presentations/revealjs/index.html). Código disponível no [GitHub](https://beatrizmilz.github.io/2023-curso-de-verao-ime-usp-relatorios/).\"\n    theme: [\"custom.scss\"]\n    slide-number: c/t\n    show-slide-number: all\n    hash-type: number\n    preview-links: false    \neditor: visual\n---\n\n\n# Introdução ao conceito de reprodutibilidade\n\n-   O que vamos aprender:\n\n    -   O que é reprodutibilidade?\n\n    -   O que são projetos no RStudio, e qual é a importância de usá-los?\n\n    -   O que são caminhos relativos e absolutos?\n\n    -   Como desabilitar a funcionalidade do RStudio que armazena automaticamente os objetos e o histórico?\n\n## Reprodutibilidade\n\n-   \"É um conceito que não tem uma definição única e comum\". [(Gundersen, 2021)](https://doi.org/10.1098/rsta.2020.0210)\n\n-   \"Para alguém fazer uma afirmação científica legítima, ele deve ser capaz de reproduzir totalmente seus resultados a partir de seus dados brutos (e de preferência outros devem ser capazes de reproduzi-los também)\". [Dr. John Paul Helveston](https://jhelvy.github.io/r4aPrimer/L6-reproducible-reporting.html)\n\n---\n\n\n### Reprodutibilidade\n\nQuais fatores contribuem com pesquisa não reprodutível? Fonte: <a href='https://doi.org/10.1038/533452a'>Baker (2016)</a>\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/irreproducible.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n---\n\n### Reprodutibilidade\n\n\n> \"Reprodutibilidade é como escovar os dentes. Isso é bom para você, mas leva tempo e esforço. Depois de aprender, torna-se um hábito.\" - Irakli Loladze, Bryan College of Health Sciences em Lincoln, Nebraska.\n\n\nBaker, M. 1,500 scientists lift the lid on reproducibility. Nature 533, 452--454 (2016). <https://doi.org/10.1038/533452a>\n\n\n\n## Exemplos\n\n-   Boas práticas, como: não usar caracteres especiais nos caminhos, variáveis, nomes de coluna, etc; armazenar os arquivos de forma consistente.\n\n-   Registrar a versão do R e dos pacotes utilizados\n\n-   Documentar a análise\n\n-   Controlar a versão dos arquivos\n\nOutras referências interessantes:\n\n-   [Introduction to bioinformatics - Chapter 8 Reproducible research, - Laurent Gatto](https://uclouvain-cbio.github.io/WSBIM1207/sec-rr.html)\n\n## Projetos do RStudio\n\n\n-   O RStudio permite a criação de Projetos.\n\n-   O projeto é uma pasta no computador, onde devemos armazenar todos os arquivos usados ou criados em uma análise. Essa pasta irá conter também um arquivo com o nome do projeto e a extensão `.Rproj`.\n\n-   Para cada análise, lembre-se de criar um `.Rproj` correspondente.\n\n### Projetos do RStudio\n\n-   Usar projetos no RStudio facilita a organização dos arquivos, posteriormente sincronizar com o GitHub, entre outros.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/rprojs.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n\n## Criando um projeto\n\n-   Criando um projeto em uma nova pasta:\n\n    -   File \\> New Project \\> New Directory \\> New Project\n\n    -   Dê um nome para seu projeto (será o nome da pasta), escolha a pasta no seu computador, e clique em `Create Project`.\n\n## Diretório de trabalho/Working Directory\n\n-   O diretório de trabalho é a pasta em que o R irá:\n\n    -   procurar arquivos na hora de ler informações;\n    -   gravar arquivos na hora de salvar objetos.\n\n-   Quando usamos Projetos do RStudio, o nosso diretório de trabalho é a pasta principal do projeto.\n\n-   A função `getwd()` serve para conferir o diretório de trabalho:\n\n``` r\n> getwd()\n[1] \"/Users/beatrizmilz/GitHub/2023-curso-de-verao-ime-usp-relatorios\"\n```\n\n-   A função `setwd()` serve para alterar o diretório de trabalho. **NÃO É RECOMENDADO O USO! Isso torna o código não reprodutível.**\n\n## Caminhos\n\n-   Caminhos são textos que representam o endereço do arquivo no computador.\n\n-   É muito importante entender como funcionam! Caso contrário, ficará difícil fazer coisas como importar dados para o R.\n\n-   Caminhos podem ser relativos ou absolutos.\n\n-   Caminhos absolutos: tem início na pasta raiz do seu computador/usuário. **NÃO É RECOMENDADO O USO! Isso torna o código não reprodutível.**\n\n-   Caminhos relativos: tem início no diretório de trabalho da sessão. Caso você esteja usando projetos, os caminhos relativos tem início na pasta inicial do projeto.\n\n-   **Utilize sempre que possível caminhos relativos.**\n\n## Exemplos de caminhos\n\nExemplos acessando o mesmo arquivo:\n\n-   Caminho absoluto:\n\n```\n\"/Users/beatrizmilz/GitHub/2023-curso-de-verao-ime-usp-relatorios/docs/slides/images/rprojs.png\"\n```\n\n\n-   Caminho relativo:\n\n```\n\"docs/slides/images/rprojs.png\"\n```\n\nO pacote `here` também possui funções úteis para escrever caminhos:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::here()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/beatrizmilz/Documents/IME-Verao/2024-curso-de-verao-ime-usp-relatorios\"\n```\n\n\n:::\n:::\n\n\n## Os arquivos .RData e .Rhistory\n\n-   Em sua configuração padrão, a IDE manterá na \"memória\" todos os últimos comandos executados, todos os dados utilizados e todos os objetos criados.\n\n-   Ao fechar e abrir o RStudio, essas informações serão recarregadas na memória como se o usuário nunca tivesse saído do programa. Esse recurso é tornado possível pela criação de dois arquivos ocultos: `.RData` e `.Rhistory`.\n\n-   O primeiro abriga absolutamente todos os objetos criados por uma sessão R, enquanto o segundo contém uma lista com os últimos comandos executados.\n\n-   Ao reabrir o RStudio, o conteúdo armazenados nestes arquivos será carregado no ambiente de trabalho atual como se nada tivesse acontecido.\n\n- Leia mais [neste capítulo do livro Zen do R](https://curso-r.github.io/zen-do-r/rdata-rhistory.html)\n\n## Por que desistir do .RData e .Rhistory\n\n-   Se todos os resultados parciais de uma análise estiverem disponíveis a qualquer momento, **diminui o incentivo para a escrita de código reprodutível**\n\n-   Ao dependermos ativamente do `.Rdata`, **se acidentalmente sobrescrevemos um objeto** relevante e o código para recriá-lo não estiver mais acessível, **não haverá nenhuma forma confiável de recuperá-lo**.\n\n-   O R trata todos os objetos guardados na memória igualmente. Isso significa que ele também irá armazenar nos arquivos ocultos todas as bases de dados da sessão. Assim, o `.RData` **pode ser um arquivo de múltiplos gigabytes**\n\n## Como desabilitar .RData e .Rhistory\n\n-   Na barra superior: **Tools \\> Global Options...**\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://curso-r.github.io/zen-do-r/static/rdata-rhistory/config.png){fig-align='center' width=40%}\n:::\n:::\n\n\n## Colocar em prática\n\n1)  Crie um projeto no RStudio para armazenar o que vamos criar durante o curso. Salve em algum lugar no seu computador que seja fácil de encontrar.\n\n2)  Desabilite o .RData e .Rhistory no seu RStudio\n\n3)  Execute o seguinte código no console, verifique o resultado: `devtools::session_info()`\n\n4)  Dentro do projeto criado, crie uma pasta chamada \"dados\", e salve o seguinte arquivo na mesma: [clique aqui para baixar o arquivo `pinguins.csv`](https://beatrizmilz.github.io/2022-curso-de-verao-ime-usp-relatorios/dados/pinguins.csv)\n\nDados originais: <https://allisonhorst.github.io/palmerpenguins/>\n\nDados traduzidos para Português: <https://cienciadedatos.github.io/dados/>\n\n## Colocar em prática: Continuação\n\n5)  Crie um R Script, copie e cole o código abaixo, e substitua o caminho correto para ler a base de pinguins. Aproveite que o RStudio nos ajuda a buscar caminhos: dentro das aspas, experimente clicar a tecla TAB.\n\n``` r\ncaminho <- \"....\" \npinguins <- readr::read_csv(caminho)\n```\n\n6)  Verifique no painel Environment do RStudio se a base de Pinguins foi importada corretamente.\n\n\n---\n\n### Exemplo do Session Info\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23)\n os       macOS Monterey 12.7.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Sao_Paulo\n date     2024-01-21\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n cachem        1.0.8      2023-05-01 [1] CRAN (R 4.2.0)\n callr         3.7.3      2022-11-02 [1] CRAN (R 4.2.0)\n cli           3.6.1      2023-03-23 [1] CRAN (R 4.2.0)\n crayon        1.5.2      2022-09-29 [1] CRAN (R 4.2.0)\n devtools      2.4.5      2022-10-11 [1] CRAN (R 4.2.0)\n digest        0.6.33     2023-07-07 [1] CRAN (R 4.2.0)\n ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.2.0)\n evaluate      0.23       2023-11-01 [1] CRAN (R 4.2.0)\n fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.2.0)\n fs            1.6.3      2023-07-20 [1] CRAN (R 4.2.0)\n glue          1.6.2      2022-02-24 [1] CRAN (R 4.2.0)\n here          1.0.1      2020-12-13 [1] CRAN (R 4.2.0)\n htmltools     0.5.7.9000 2023-11-14 [1] Github (rstudio/htmltools@7efa2d8)\n htmlwidgets   1.6.2      2023-03-17 [1] CRAN (R 4.2.0)\n httpuv        1.6.12     2023-10-23 [1] CRAN (R 4.2.0)\n jsonlite      1.8.7      2023-06-29 [1] CRAN (R 4.2.0)\n knitr         1.45       2023-10-30 [1] CRAN (R 4.2.0)\n later         1.3.1      2023-05-02 [1] CRAN (R 4.2.0)\n lifecycle     1.0.4      2023-11-07 [1] CRAN (R 4.2.1)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.2.0)\n memoise       2.0.1      2021-11-26 [1] CRAN (R 4.2.0)\n mime          0.12       2021-09-28 [1] CRAN (R 4.2.0)\n miniUI        0.1.1.1    2018-05-18 [1] CRAN (R 4.2.0)\n pkgbuild      1.4.2      2023-06-26 [1] CRAN (R 4.2.0)\n pkgload       1.3.3      2023-09-22 [1] CRAN (R 4.2.0)\n prettyunits   1.2.0      2023-09-24 [1] CRAN (R 4.2.0)\n processx      3.8.2      2023-06-30 [1] CRAN (R 4.2.0)\n profvis       0.3.8      2023-05-02 [1] CRAN (R 4.2.0)\n promises      1.2.1      2023-08-10 [1] CRAN (R 4.2.0)\n ps            1.7.5      2023-04-18 [1] CRAN (R 4.2.0)\n purrr         1.0.2      2023-08-10 [1] CRAN (R 4.2.0)\n R6            2.5.1      2021-08-19 [1] CRAN (R 4.2.0)\n Rcpp          1.0.11     2023-07-06 [1] CRAN (R 4.2.0)\n remotes       2.4.2.1    2023-07-18 [1] CRAN (R 4.2.0)\n rlang         1.1.2      2023-11-04 [1] CRAN (R 4.2.1)\n rmarkdown     2.25       2023-09-18 [1] CRAN (R 4.2.0)\n rprojroot     2.0.4      2023-11-05 [1] CRAN (R 4.2.1)\n rstudioapi    0.15.0     2023-07-07 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.2.0)\n shiny         1.7.5.1    2023-10-14 [1] CRAN (R 4.2.0)\n stringi       1.8.2      2023-11-23 [1] CRAN (R 4.2.3)\n stringr       1.5.1      2023-11-14 [1] CRAN (R 4.2.3)\n urlchecker    1.0.1      2021-11-30 [1] CRAN (R 4.2.0)\n usethis       2.2.2      2023-07-06 [1] CRAN (R 4.2.0)\n vctrs         0.6.4      2023-10-12 [1] CRAN (R 4.2.0)\n xfun          0.41       2023-11-01 [1] CRAN (R 4.2.0)\n xtable        1.8-4      2019-04-21 [1] CRAN (R 4.2.0)\n yaml          2.3.7      2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n## Revisão - Reprodutibilidade\n\n-   Em um código reprodutível, devemos ser capazes de reproduzir totalmente os resultados a partir dos dados brutos, assim como outras pessoas (em computadores diferentes) também devem ser capazes de reproduzir esses mesmos resultados a partir dos dados brutos.\n\n-   Utilizar boas práticas aumentam as chances de escrever um código reprodutível.\n\n\n## Exemplos de boas práticas:\n\n-   Utilizar Projetos do RStudio. Quando usamos projetos do RStudio, o diretório de trabalho será a pasta principal do projeto.\n\n-   Desabilitar o .Rhistory e .Rdata.\n\n-   Utilizar caminhos relativos.\n    \n-  Documentar os pacotes e versões utilizadas.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}